const { EmbedBuilder, ActivityType } = require("discord.js");
const FiveM = require("fivem-stats");
const config = require("../config.json");

const server = new FiveM.Stats(`${config.SERVER_IP}:${config.SERVER_PORT || 30120}`);
let clientInstance = null;

let lastStatus = null;
let lastWebhookTimestamp = 0;

function initStatusHandler(client) {
  clientInstance = client;
}

function getEmbed(statusText) {
  const embed = new EmbedBuilder()
    .setThumbnail(config.SERVER_LOGO);

  switch (statusText) {
    case "restart":
      embed
        .setColor(config.EMBED_COLOR_RESTART) // ‡∏™‡πâ‡∏°
        .setTitle("üîÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        .setDescription(`‡∏á‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n**Server Status:** \`üîÅ Restart üîÅ\``)
        .setImage("https://cdn-icons-png.flaticon.com/512/16265/16265301.png");
      break;
    case "online":
      embed
        .setColor(config.EMBED_COLOR_ONLINE) // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        .setTitle("‚úÖ TEST RESTART SERVER")
        .setDescription(`Server ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n‡∏Å‡∏î F8 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Console ‡∏ô‡∏≥ IP ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n\`\`\`connect ${config.SERVER_IP}:${config.SERVER_PORT}\`\`\`\n**‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå**\n\`\`\`${config.RESTART_TIMES}\`\`\`\n**Server Status:** \`üü¢ Online üü¢\``)
        .setImage("https://cdn-icons-png.flaticon.com/512/11433/11433365.png");
      break;
    case "maintenance":
      embed
        .setColor(config.EMBED_COLOR_MAINTENANCE) // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        .setTitle("üõ†Ô∏è Server Maintenance")
        .setDescription(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡∏á‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n\n**Server Status:** \`‚ö†Ô∏è Maintenance ‚ö†Ô∏è\``)
        .setImage("https://cdn-icons-png.flaticon.com/512/18208/18208249.png");
      break;
    case "offline":
    default:
      embed
        .setColor(config.EMBED_COLOR_OFFLINE) // ‡πÅ‡∏î‡∏á
        .setTitle("‚ùå Server Offline")
        .setDescription(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n\n**Server Status:** \`üî¥ Offline üî¥\``)
        .setImage("https://cdn-icons-png.flaticon.com/512/448/448942.png");
      break;
  }

  embed.setFooter({
    text: `Jimmy Bot v.3 - ${new Date().toLocaleString("th-TH")}`,
  });

  return embed;
}

async function sendStatusUpdate(statusText) {
  const embed = getEmbed(statusText);

  if (!clientInstance) {
    console.error("‚ùå clientInstance ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏ï! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö initStatusHandler(client)");
    return;
  }

  try {
    const channel = await clientInstance.channels.fetch(config.CHANNEL_ID);
    if (!channel) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Channel ‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ô‡∏µ‡πâ:", config.CHANNEL_ID);
      return;
    }

    await channel.send({
      content: `<@&${config.STATUS_ROLE_ID}>`,
      embeds: [embed],
    });
    console.log(`üì£ ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‚Üí ${statusText}`);
  } catch (err) {
    console.error("‚ùå ‡∏™‡πà‡∏á embed ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
  }
}

async function getStatus() {
  try {
    const isOnline = (await server.getServerStatus()).online;
    return isOnline ? "online" : "offline";
  } catch (err) {
    console.error("‚ö†Ô∏è Error getting server status:", err.message);
    return "offline";
  }
}

async function checkServerStatus() {
  const now = Date.now();
  if (now - lastWebhookTimestamp < 30000) {
    console.log("‚è≥ Skipped polling check (recent webhook received)");
    return;
  }

  const currentStatus = await getStatus();
  if (currentStatus !== lastStatus) {
    lastStatus = currentStatus;
    await sendStatusUpdate(currentStatus);
  } else {
    console.log(`‚úÖ No change - Server still: ${currentStatus}`);
  }
}

async function handleWebhookStatusUpdate(status) {
  if (status !== lastStatus) {
    lastStatus = status;
    lastWebhookTimestamp = Date.now();
    await sendStatusUpdate(status);

    if (status === "restart") {
      setTimeout(() => {
        console.log("üîç Checking if server went offline after restart...");
        checkServerStatus();
      }, 10000);
    }

    return { message: `Status updated to ${status}` };
  } else {
    console.log(`[Webhook] Status already ${status}, no update sent.`);
    return { message: `Status already ${status}` };
  }
}

async function updateBotStatus(client, status) {
  let activity = {
    type: ActivityType.Custom,
    name: 'Custom Status',
    state: ''
  };

  switch (status.toLowerCase()) {
    case 'online':
      activity.state = 'üü¢ Server status: Online';
      break;
    case 'offline':
      activity.state = 'üî¥ Server status: Offline';
      break;
    case 'restart':
      activity.state = 'üîÅ Server status: Restarting';
      break;
    case 'maintenance':
      activity.state = 'üõ†Ô∏è Server status: Maintenance';
      break;
    default:
      activity.state = '‚ùì Unknown status';
  }

  try {
    await client.user.setPresence({ activities: [activity], status: 'online' });
    console.log(`‚úÖ Updated bot presence to: ${activity.state}`);
  } catch (error) {
    console.error('‚ùå Error updating bot presence:', error);
  }
}

module.exports = {
  initStatusHandler,
  checkServerStatus,
  handleWebhookStatusUpdate,
  updateBotStatus,
}
